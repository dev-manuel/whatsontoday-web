->     /events                         events.Routes

->     /login                          login.Routes

->     /user                           user.Routes

->     /organizer                      organizer.Routes


###
#  summary: Query all categories
#  responses:
#    200:
#      description: success
#      schema:
#        $ref: '#/definitions/whatson.model.detail.CategoryDetail'
###
GET    /category                     controllers.CategoryController.categories

###
#  summary: Search locations by name
#  parameters:
#  - in: header
#    name: X-Page
#    schema:
#      type: integer
#  - in: header
#    name: X-Page-Size
#    schema:
#      type: integer
#  responses:
#    200:
#      description: success
#      schema:
#        $ref: '#/definitions/whatson.model.detail.LocationDetail'
###
GET    /location                       controllers.LocationController.searchLocations(search: Option[String])

###
#  summary: Get a specific location
#  responses:
#    200:
#      description: success
#      schema:
#        $ref: '#/definitions/whatson.model.detail.LocationDetail'
###
GET    /location/:id                   controllers.LocationController.getLocation(id: Int)

###
#  summary: Get locations nearby a specific location
#  responses:
#    200:
#      description: success
#      schema:
#        $ref: '#/definitions/whatson.model.detail.LocationDetail'
###
GET    /location/nearby/:id            controllers.LocationController.getNearby(id: Int)

###
#  summary: Create a location
#  parameters:
#  - in: header
#    name: x-auth-token
#    schema:
#      type: string
#  - name: body
#    schema:
#      $ref: '#/definitions/whatson.model.Location'
#  responses:
#    200:
#      description: success
#      schema:
#        $ref: '#/definitions/whatson.model.Location'
###
POST   /location                       controllers.LocationController.createLocation()

###
#  summary: Rate a specific entity
#  parameters:
#  - in: header
#    name: x-auth-token
#    schema:
#      type: string
#  - name: entityType
#    enum: ["Event","Location","Organizer"]
#  responses:
#    200:
#      description: success
#      schema:
#        $ref: '#/definitions/whatson.model.Rating'
###
GET    /rating/:id/:entityType/:rate   controllers.RatingController.rateEntity(id: Int, entityType: String, rate: Float)

###
#  summary: Get a specific image
#  responses:
#    200:
#      description: success
###
GET    /images/:id            controllers.ImageController.get(id: Int)

###
#  summary: Get bytes of a specific image
#  responses:
#    200:
#      description: success
###
GET    /images/bytes/:id            controllers.ImageController.getBytes(id: Int)

###
#  summary: Create an image
#  consumes:
#  - multipart/form-data
#  parameters:
#  - in: formData
#    name: image
#    type: file
#    description: The file to upload.
#  responses:
#    200:
#      description: success
#      schema:
#        $ref: '#/definitions/whatson.model.Image'
###
POST   /images/:name                 controllers.ImageController.createImage(name: String)

###
#  summary: Attach an image
#  parameters:
#  - in: header
#    name: x-auth-token
#    schema:
#      type: string
#    required: true
#  - name: entityType
#    enum: ["Event","Location","Organizer"]
#  responses:
#    200:
#      description: success
#      schema:
#        $ref: '#/definitions/whatson.model.ImageEntity'
###
GET   /images/attach/:id             controllers.ImageController.attachImage(id: Int, entityType: String, entityId: Int)


###
#  summary: Create a category
#  parameters:
#  - in: header
#    name: x-auth-token
#    schema:
#      type: string
#  - name: body
#    schema:
#      $ref: '#/definitions/whatson.model.Category'
#  responses:
#    200:
#      description: success
#      schema:
#        $ref: '#/definitions/whatson.model.Category'
###
POST   /category                       controllers.CategoryController.createCategory()