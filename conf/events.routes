###
#  summary: Query all events by name, location, categories
#  parameters:
#  - in: header
#    name: X-Page
#    schema:
#      type: integer
#    default: 0
#  - in: header
#    name: X-Page-Size
#    schema:
#      type: integer
#    default: 20
#  - name: sort
#    description: Specifies wich column to sort by
#    default: "id"
#    enum: ["id","name","from","to","rating","location"]
#  - name: sortDir
#    description: Specifies wether to sort ascending(true) or descending
#  - name: location
#    description: If sort is set to location, events will be ordered by distance to the given location
#  - name: category
#    description: Specifies the category of the event
#  responses:
#    200:
#      description: success
#      schema:
#        type: array
#        items:
#          $ref: '#/definitions/whatson.model.Event'
###
GET      /   controllers.EventController.searchEvents(search: Option[String], location: Option[Int], category: Option[Int], sort:Option[String], sortDir: Boolean)

###
#  summary: Query the event with a specific id
#  responses:
#    200:
#      description: success
#      schema:
#        $ref: '#/definitions/whatson.model.Event'
###
GET      /:id                         controllers.EventController.getEvent(id: Int)

###
#  summary: Delete an event
#  parameters:
#  - in: header
#    name: x-auth-token
#    schema:
#      type: string
#  responses:
#    200:
#      description: Event deleted
###
DELETE   /:id                         controllers.EventController.deleteEvent(id: Int)

###
#  summary: Create an event
#  parameters:
#  - in: header
#    name: x-auth-token
#    schema:
#      type: string
#  - name: body
#    schema:
#      $ref: '#/definitions/whatson.model.Event'
#    description: Dates (from and to), should be in the format 'yyyy-MM-dd HH:mm:ss' (example "2017-05-23 23:05:22")
#  responses:
#    200:
#      description: success
#      schema:
#        $ref: '#/definitions/whatson.model.Event'
###
POST     /                            controllers.EventController.createEvent

###
#  summary: Update an event with a specific id
#  parameters:
#  - in: header
#    name: x-auth-token
#    schema:
#      type: string
#  - name: body
#    schema:
#      $ref: '#/definitions/whatson.model.Event'
#  responses:
#    200:
#      description: success
#      schema:
#        $ref: '#/definitions/whatson.model.Event'
###
PUT      /:id                         controllers.EventController.updateEvent(id: Int)