###
#  summary: Get the events of the currently logged in organizer
#  parameters:
#  - in: header
#    name: X-Page
#    schema:
#      type: integer
#    default: 0
#  - in: header
#    name: X-Page-Size
#    schema:
#      type: integer
#    default: 20
#  - in: header
#    name: x-auth-token
#    schema:
#      type: string
#  responses:
#    200:
#      description: success
#      headers:
#        x-number-items:
#          type: integer
#          description: The total number of items on all pages
#      schema:
#        type: array
#        items:
#          $ref: '#/definitions/whatson.model.detail.EventDetail'
###
GET   /eventsCurrent                   controllers.OrganizerController.getLoggedInEvents

###
#  summary: Get the public account of an organizer
#  responses:
#    200:
#      description: success
#      schema:
#        $ref: '#/definitions/whatson.model.detail.OrganizerPublic'
###
GET   /:id                   controllers.OrganizerController.get(id: Int)

###
#  summary: Create a new account
#  description: >
#      A new account gets created. The access token to this account is returned.
#      All secured endpoints require the access token in the header parameter called 'x-auth-token'.
#  parameters:
#  - name: body
#    schema:
#      $ref: '#/definitions/whatson.model.forms.OrganizerSignUpForm.Data'
#    description: The user data. The password must not be hashed.
#  - in: header
#    name: x-auth-token
#    schema:
#      type: string
#  responses:
#    200:
#      description: Success. A login/confirmation is required after this.
#    400:
#      description: Organizer already exists
###
POST   /signUp                   controllers.OrganizerController.signUp

###
#  summary: Get the events of an organizer
#  parameters:
#  - in: header
#    name: X-Page
#    schema:
#      type: integer
#    default: 0
#  - in: header
#    name: X-Page-Size
#    schema:
#      type: integer
#    default: 20
#  - name: sort
#    description: Specifies wich column to sort by
#    default: "from"
#    enum: ["id","name","from","to","rating"]
#  - name: sortDir
#    description: Specifies wether to sort ascending(true) or descending
#  responses:
#    200:
#      description: success
#      headers:
#        x-number-items:
#          type: integer
#          description: The total number of items on all pages
#      schema:
#        type: array
#        items:
#          $ref: '#/definitions/whatson.model.detail.EventDetail'
###
GET   /events/:id                   controllers.OrganizerController.getEvents(id: Int, sort: Option[String], sortDir: Boolean)